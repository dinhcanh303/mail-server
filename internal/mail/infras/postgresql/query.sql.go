// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgresql

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/sqlc-dev/pqtype"
)

const createClient = `-- name: CreateClient :one
INSERT INTO mail.clients (
    name,
    server_id,
    template_id
) VALUES ($1,$2,$3) RETURNING id, name, server_id, template_id, is_default, created_at, updated_at
`

type CreateClientParams struct {
	Name       string `json:"name"`
	ServerID   int64  `json:"server_id"`
	TemplateID int64  `json:"template_id"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (MailClient, error) {
	row := q.db.QueryRowContext(ctx, createClient, arg.Name, arg.ServerID, arg.TemplateID)
	var i MailClient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ServerID,
		&i.TemplateID,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createHistory = `-- name: CreateHistory :one
INSERT INTO mail.histories (
    from_,
    to_,
    subject,
    cc,
    bcc,
    content,
    status
) VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING id, from_, to_, subject, cc, bcc, content, status, created_at, updated_at
`

type CreateHistoryParams struct {
	From    string          `json:"from_"`
	To      string          `json:"to_"`
	Subject sql.NullString  `json:"subject"`
	Cc      sql.NullString  `json:"cc"`
	Bcc     sql.NullString  `json:"bcc"`
	Content json.RawMessage `json:"content"`
	Status  sql.NullString  `json:"status"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (MailHistory, error) {
	row := q.db.QueryRowContext(ctx, createHistory,
		arg.From,
		arg.To,
		arg.Subject,
		arg.Cc,
		arg.Bcc,
		arg.Content,
		arg.Status,
	)
	var i MailHistory
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Subject,
		&i.Cc,
		&i.Bcc,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createServer = `-- name: CreateServer :one
INSERT INTO mail.servers (
    name,
    host,
    port,
    auth_protocol,
    username,
    password,
    from_name,
    from_address,
    tls_type,
    tls_skip_verify,
    max_connections,
    idle_timeout,
    retries,
    wait_timeout
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) RETURNING id, name, host, port, auth_protocol, username, password, from_name, from_address, tls_type, tls_skip_verify, max_connections, idle_timeout, retries, wait_timeout, is_default, created_at, updated_at
`

type CreateServerParams struct {
	Name           string         `json:"name"`
	Host           string         `json:"host"`
	Port           int64          `json:"port"`
	AuthProtocol   sql.NullString `json:"auth_protocol"`
	Username       string         `json:"username"`
	Password       string         `json:"password"`
	FromName       sql.NullString `json:"from_name"`
	FromAddress    sql.NullString `json:"from_address"`
	TlsType        sql.NullString `json:"tls_type"`
	TlsSkipVerify  sql.NullBool   `json:"tls_skip_verify"`
	MaxConnections sql.NullInt64  `json:"max_connections"`
	IdleTimeout    sql.NullInt64  `json:"idle_timeout"`
	Retries        sql.NullInt64  `json:"retries"`
	WaitTimeout    sql.NullInt64  `json:"wait_timeout"`
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (MailServer, error) {
	row := q.db.QueryRowContext(ctx, createServer,
		arg.Name,
		arg.Host,
		arg.Port,
		arg.AuthProtocol,
		arg.Username,
		arg.Password,
		arg.FromName,
		arg.FromAddress,
		arg.TlsType,
		arg.TlsSkipVerify,
		arg.MaxConnections,
		arg.IdleTimeout,
		arg.Retries,
		arg.WaitTimeout,
	)
	var i MailServer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.AuthProtocol,
		&i.Username,
		&i.Password,
		&i.FromName,
		&i.FromAddress,
		&i.TlsType,
		&i.TlsSkipVerify,
		&i.MaxConnections,
		&i.IdleTimeout,
		&i.Retries,
		&i.WaitTimeout,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO mail.templates (
    name,
    html,
    status
) VALUES ($1,$2,$3) RETURNING id, name, html, status, is_default, created_at, updated_at
`

type CreateTemplateParams struct {
	Name   string         `json:"name"`
	Html   sql.NullString `json:"html"`
	Status sql.NullString `json:"status"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (MailTemplate, error) {
	row := q.db.QueryRowContext(ctx, createTemplate, arg.Name, arg.Html, arg.Status)
	var i MailTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Html,
		&i.Status,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM mail.clients WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const deleteHistory = `-- name: DeleteHistory :exec
DELETE FROM mail.histories WHERE id = $1
`

func (q *Queries) DeleteHistory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHistory, id)
	return err
}

const deleteServer = `-- name: DeleteServer :exec
DELETE FROM mail.servers WHERE id = $1
`

func (q *Queries) DeleteServer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteServer, id)
	return err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM mail.templates WHERE id = $1
`

func (q *Queries) DeleteTemplate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTemplate, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, name, server_id, template_id, is_default, created_at, updated_at FROM mail.clients WHERE id = $1
`

func (q *Queries) GetClient(ctx context.Context, id int64) (MailClient, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i MailClient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ServerID,
		&i.TemplateID,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClients = `-- name: GetClients :many
SELECT id, name, server_id, template_id, is_default, created_at, updated_at FROM mail.clients LIMIT $1 OFFSET $2
`

type GetClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetClients(ctx context.Context, arg GetClientsParams) ([]MailClient, error) {
	rows, err := q.db.QueryContext(ctx, getClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailClient
	for rows.Next() {
		var i MailClient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ServerID,
			&i.TemplateID,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistories = `-- name: GetHistories :many
SELECT id, from_, to_, subject, cc, bcc, content, status, created_at, updated_at FROM mail.histories LIMIT $1 OFFSET $2
`

type GetHistoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetHistories(ctx context.Context, arg GetHistoriesParams) ([]MailHistory, error) {
	rows, err := q.db.QueryContext(ctx, getHistories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailHistory
	for rows.Next() {
		var i MailHistory
		if err := rows.Scan(
			&i.ID,
			&i.From,
			&i.To,
			&i.Subject,
			&i.Cc,
			&i.Bcc,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHistory = `-- name: GetHistory :one
SELECT id, from_, to_, subject, cc, bcc, content, status, created_at, updated_at FROM mail.histories WHERE id = $1
`

func (q *Queries) GetHistory(ctx context.Context, id int64) (MailHistory, error) {
	row := q.db.QueryRowContext(ctx, getHistory, id)
	var i MailHistory
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Subject,
		&i.Cc,
		&i.Bcc,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServer = `-- name: GetServer :one
SELECT id, name, host, port, auth_protocol, username, password, from_name, from_address, tls_type, tls_skip_verify, max_connections, idle_timeout, retries, wait_timeout, is_default, created_at, updated_at FROM mail.servers WHERE id = $1
`

func (q *Queries) GetServer(ctx context.Context, id int64) (MailServer, error) {
	row := q.db.QueryRowContext(ctx, getServer, id)
	var i MailServer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.AuthProtocol,
		&i.Username,
		&i.Password,
		&i.FromName,
		&i.FromAddress,
		&i.TlsType,
		&i.TlsSkipVerify,
		&i.MaxConnections,
		&i.IdleTimeout,
		&i.Retries,
		&i.WaitTimeout,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServers = `-- name: GetServers :many
SELECT id, name, host, port, auth_protocol, username, password, from_name, from_address, tls_type, tls_skip_verify, max_connections, idle_timeout, retries, wait_timeout, is_default, created_at, updated_at FROM mail.servers LIMIT $1 OFFSET $2
`

type GetServersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetServers(ctx context.Context, arg GetServersParams) ([]MailServer, error) {
	rows, err := q.db.QueryContext(ctx, getServers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailServer
	for rows.Next() {
		var i MailServer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Host,
			&i.Port,
			&i.AuthProtocol,
			&i.Username,
			&i.Password,
			&i.FromName,
			&i.FromAddress,
			&i.TlsType,
			&i.TlsSkipVerify,
			&i.MaxConnections,
			&i.IdleTimeout,
			&i.Retries,
			&i.WaitTimeout,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplate = `-- name: GetTemplate :one
SELECT id, name, html, status, is_default, created_at, updated_at FROM mail.templates WHERE id = $1
`

func (q *Queries) GetTemplate(ctx context.Context, id int64) (MailTemplate, error) {
	row := q.db.QueryRowContext(ctx, getTemplate, id)
	var i MailTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Html,
		&i.Status,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTemplates = `-- name: GetTemplates :many
SELECT id, name, html, status, is_default, created_at, updated_at FROM mail.templates LIMIT $1 OFFSET $2
`

type GetTemplatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTemplates(ctx context.Context, arg GetTemplatesParams) ([]MailTemplate, error) {
	rows, err := q.db.QueryContext(ctx, getTemplates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailTemplate
	for rows.Next() {
		var i MailTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Html,
			&i.Status,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplatesActive = `-- name: GetTemplatesActive :many
SELECT id, name, html, status, is_default, created_at, updated_at FROM mail.templates WHERE status = 'active'
`

func (q *Queries) GetTemplatesActive(ctx context.Context) ([]MailTemplate, error) {
	rows, err := q.db.QueryContext(ctx, getTemplatesActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailTemplate
	for rows.Next() {
		var i MailTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Html,
			&i.Status,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE mail.clients SET 
    name = COALESCE($1,name),
    server_id = COALESCE($2,server_id),
    template_id = COALESCE($3,template_id)
WHERE id = $4 RETURNING id, name, server_id, template_id, is_default, created_at, updated_at
`

type UpdateClientParams struct {
	Name       sql.NullString `json:"name"`
	ServerID   sql.NullInt64  `json:"server_id"`
	TemplateID sql.NullInt64  `json:"template_id"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (MailClient, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.Name,
		arg.ServerID,
		arg.TemplateID,
		arg.ID,
	)
	var i MailClient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ServerID,
		&i.TemplateID,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateHistory = `-- name: UpdateHistory :one
UPDATE mail.histories SET 
    from_ = COALESCE($1,from_),
    to_ = COALESCE($2,to_),
    subject = COALESCE($3,subject),
    cc = COALESCE($4,cc),
    bcc = COALESCE($5,bcc),
    content = COALESCE($6,content),
    status = COALESCE($7,status)
WHERE id = $8 RETURNING id, from_, to_, subject, cc, bcc, content, status, created_at, updated_at
`

type UpdateHistoryParams struct {
	From    sql.NullString        `json:"from_"`
	To      sql.NullString        `json:"to_"`
	Subject sql.NullString        `json:"subject"`
	Cc      sql.NullString        `json:"cc"`
	Bcc     sql.NullString        `json:"bcc"`
	Content pqtype.NullRawMessage `json:"content"`
	Status  sql.NullString        `json:"status"`
	ID      int64                 `json:"id"`
}

func (q *Queries) UpdateHistory(ctx context.Context, arg UpdateHistoryParams) (MailHistory, error) {
	row := q.db.QueryRowContext(ctx, updateHistory,
		arg.From,
		arg.To,
		arg.Subject,
		arg.Cc,
		arg.Bcc,
		arg.Content,
		arg.Status,
		arg.ID,
	)
	var i MailHistory
	err := row.Scan(
		&i.ID,
		&i.From,
		&i.To,
		&i.Subject,
		&i.Cc,
		&i.Bcc,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateServer = `-- name: UpdateServer :one
UPDATE mail.servers SET
    name = COALESCE($1,name),
    host = COALESCE($2,host),
    port = COALESCE($3,port),
    auth_protocol = COALESCE($4,auth_protocol),
    username = COALESCE($5,username),
    password = COALESCE($6,password),
    from_name = COALESCE($7,from_name),
    from_address = COALESCE($8,from_address),
    tls_type = COALESCE($9,tls_type),
    tls_skip_verify = COALESCE($10,tls_skip_verify),
    max_connections = COALESCE($11,max_connections),
    idle_timeout = COALESCE($12,idle_timeout),
    retries = COALESCE($13,retries),
    wait_timeout = COALESCE($14,wait_timeout)
WHERE id = $15 RETURNING id, name, host, port, auth_protocol, username, password, from_name, from_address, tls_type, tls_skip_verify, max_connections, idle_timeout, retries, wait_timeout, is_default, created_at, updated_at
`

type UpdateServerParams struct {
	Name           sql.NullString `json:"name"`
	Host           sql.NullString `json:"host"`
	Port           sql.NullInt64  `json:"port"`
	AuthProtocol   sql.NullString `json:"auth_protocol"`
	Username       sql.NullString `json:"username"`
	Password       sql.NullString `json:"password"`
	FromName       sql.NullString `json:"from_name"`
	FromAddress    sql.NullString `json:"from_address"`
	TlsType        sql.NullString `json:"tls_type"`
	TlsSkipVerify  sql.NullBool   `json:"tls_skip_verify"`
	MaxConnections sql.NullInt64  `json:"max_connections"`
	IdleTimeout    sql.NullInt64  `json:"idle_timeout"`
	Retries        sql.NullInt64  `json:"retries"`
	WaitTimeout    sql.NullInt64  `json:"wait_timeout"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateServer(ctx context.Context, arg UpdateServerParams) (MailServer, error) {
	row := q.db.QueryRowContext(ctx, updateServer,
		arg.Name,
		arg.Host,
		arg.Port,
		arg.AuthProtocol,
		arg.Username,
		arg.Password,
		arg.FromName,
		arg.FromAddress,
		arg.TlsType,
		arg.TlsSkipVerify,
		arg.MaxConnections,
		arg.IdleTimeout,
		arg.Retries,
		arg.WaitTimeout,
		arg.ID,
	)
	var i MailServer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.AuthProtocol,
		&i.Username,
		&i.Password,
		&i.FromName,
		&i.FromAddress,
		&i.TlsType,
		&i.TlsSkipVerify,
		&i.MaxConnections,
		&i.IdleTimeout,
		&i.Retries,
		&i.WaitTimeout,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTemplate = `-- name: UpdateTemplate :one
UPDATE mail.templates SET 
    name = COALESCE($1,name),
    html = COALESCE($2,html),
    status = COALESCE($3,status)
WHERE id = $4 RETURNING id, name, html, status, is_default, created_at, updated_at
`

type UpdateTemplateParams struct {
	Name   sql.NullString `json:"name"`
	Html   sql.NullString `json:"html"`
	Status sql.NullString `json:"status"`
	ID     int64          `json:"id"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (MailTemplate, error) {
	row := q.db.QueryRowContext(ctx, updateTemplate,
		arg.Name,
		arg.Html,
		arg.Status,
		arg.ID,
	)
	var i MailTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Html,
		&i.Status,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
