// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgresql

import (
	"context"
	"database/sql"
)

const createServer = `-- name: CreateServer :one
INSERT INTO mail.servers (
    name,
    host,
    port,
    username,
    password,
    tls,
    skip_tls,
    max_connections,
    idle_timeout,
    retries,
    wait_timeout
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) RETURNING id, name, host, port, username, password, tls, skip_tls, max_connections, idle_timeout, retries, wait_timeout, created_at, updated_at
`

type CreateServerParams struct {
	Name           string         `json:"name"`
	Host           string         `json:"host"`
	Port           int64          `json:"port"`
	Username       string         `json:"username"`
	Password       string         `json:"password"`
	Tls            sql.NullString `json:"tls"`
	SkipTls        sql.NullBool   `json:"skip_tls"`
	MaxConnections sql.NullInt64  `json:"max_connections"`
	IdleTimeout    sql.NullInt64  `json:"idle_timeout"`
	Retries        sql.NullInt64  `json:"retries"`
	WaitTimeout    sql.NullInt64  `json:"wait_timeout"`
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (MailServer, error) {
	row := q.db.QueryRowContext(ctx, createServer,
		arg.Name,
		arg.Host,
		arg.Port,
		arg.Username,
		arg.Password,
		arg.Tls,
		arg.SkipTls,
		arg.MaxConnections,
		arg.IdleTimeout,
		arg.Retries,
		arg.WaitTimeout,
	)
	var i MailServer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Password,
		&i.Tls,
		&i.SkipTls,
		&i.MaxConnections,
		&i.IdleTimeout,
		&i.Retries,
		&i.WaitTimeout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO mail.templates (
    name,
    html,
    status
) VALUES ($1,$2,$3) RETURNING id, name, html, status, created_at, updated_at
`

type CreateTemplateParams struct {
	Name   string         `json:"name"`
	Html   sql.NullString `json:"html"`
	Status sql.NullString `json:"status"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (MailTemplate, error) {
	row := q.db.QueryRowContext(ctx, createTemplate, arg.Name, arg.Html, arg.Status)
	var i MailTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Html,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteServer = `-- name: DeleteServer :exec
DELETE FROM mail.servers WHERE id = $1
`

func (q *Queries) DeleteServer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteServer, id)
	return err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM mail.templates WHERE id = $1
`

func (q *Queries) DeleteTemplate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTemplate, id)
	return err
}

const getServer = `-- name: GetServer :one
SELECT id, name, host, port, username, password, tls, skip_tls, max_connections, idle_timeout, retries, wait_timeout, created_at, updated_at FROM mail.servers WHERE id = $1
`

func (q *Queries) GetServer(ctx context.Context, id int64) (MailServer, error) {
	row := q.db.QueryRowContext(ctx, getServer, id)
	var i MailServer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Password,
		&i.Tls,
		&i.SkipTls,
		&i.MaxConnections,
		&i.IdleTimeout,
		&i.Retries,
		&i.WaitTimeout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServers = `-- name: GetServers :many
SELECT id, name, host, port, username, password, tls, skip_tls, max_connections, idle_timeout, retries, wait_timeout, created_at, updated_at FROM mail.servers LIMIT $1 OFFSET $2
`

type GetServersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetServers(ctx context.Context, arg GetServersParams) ([]MailServer, error) {
	rows, err := q.db.QueryContext(ctx, getServers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailServer
	for rows.Next() {
		var i MailServer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Host,
			&i.Port,
			&i.Username,
			&i.Password,
			&i.Tls,
			&i.SkipTls,
			&i.MaxConnections,
			&i.IdleTimeout,
			&i.Retries,
			&i.WaitTimeout,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplate = `-- name: GetTemplate :one
SELECT id, name, html, status, created_at, updated_at FROM mail.templates WHERE id = $1
`

func (q *Queries) GetTemplate(ctx context.Context, id int64) (MailTemplate, error) {
	row := q.db.QueryRowContext(ctx, getTemplate, id)
	var i MailTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Html,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTemplates = `-- name: GetTemplates :many
SELECT id, name, html, status, created_at, updated_at FROM mail.templates LIMIT $1 OFFSET $2
`

type GetTemplatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTemplates(ctx context.Context, arg GetTemplatesParams) ([]MailTemplate, error) {
	rows, err := q.db.QueryContext(ctx, getTemplates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailTemplate
	for rows.Next() {
		var i MailTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Html,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServer = `-- name: UpdateServer :one
UPDATE mail.servers SET
    name = COALESCE($1,name),
    host = COALESCE($2,host),
    port = COALESCE($3,port),
    username = COALESCE($4,username),
    password = COALESCE($5,password),
    tls = COALESCE($6,tls),
    skip_tls = COALESCE($7,skip_tls),
    max_connections = COALESCE($8,max_connections),
    idle_timeout = COALESCE($9,idle_timeout),
    retries = COALESCE($10,retries),
    wait_timeout = COALESCE($11,wait_timeout)
WHERE id = $12 RETURNING id, name, host, port, username, password, tls, skip_tls, max_connections, idle_timeout, retries, wait_timeout, created_at, updated_at
`

type UpdateServerParams struct {
	Name           sql.NullString `json:"name"`
	Host           sql.NullString `json:"host"`
	Port           sql.NullInt64  `json:"port"`
	Username       sql.NullString `json:"username"`
	Password       sql.NullString `json:"password"`
	Tls            sql.NullString `json:"tls"`
	SkipTls        sql.NullBool   `json:"skip_tls"`
	MaxConnections sql.NullInt64  `json:"max_connections"`
	IdleTimeout    sql.NullInt64  `json:"idle_timeout"`
	Retries        sql.NullInt64  `json:"retries"`
	WaitTimeout    sql.NullInt64  `json:"wait_timeout"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateServer(ctx context.Context, arg UpdateServerParams) (MailServer, error) {
	row := q.db.QueryRowContext(ctx, updateServer,
		arg.Name,
		arg.Host,
		arg.Port,
		arg.Username,
		arg.Password,
		arg.Tls,
		arg.SkipTls,
		arg.MaxConnections,
		arg.IdleTimeout,
		arg.Retries,
		arg.WaitTimeout,
		arg.ID,
	)
	var i MailServer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Host,
		&i.Port,
		&i.Username,
		&i.Password,
		&i.Tls,
		&i.SkipTls,
		&i.MaxConnections,
		&i.IdleTimeout,
		&i.Retries,
		&i.WaitTimeout,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTemplate = `-- name: UpdateTemplate :one
UPDATE mail.templates SET 
    name = COALESCE($1,name),
    html = COALESCE($2,html),
    status = COALESCE($3,status)
WHERE id = $4 RETURNING id, name, html, status, created_at, updated_at
`

type UpdateTemplateParams struct {
	Name   sql.NullString `json:"name"`
	Html   sql.NullString `json:"html"`
	Status sql.NullString `json:"status"`
	ID     int64          `json:"id"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (MailTemplate, error) {
	row := q.db.QueryRowContext(ctx, updateTemplate,
		arg.Name,
		arg.Html,
		arg.Status,
		arg.ID,
	)
	var i MailTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Html,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
